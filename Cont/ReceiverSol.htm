<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<title>Ресиверы: общее</title>
<LINK REL="stylesheet" MEDIA="screen" TYPE="text/css" HREF="../style.css">
<script src="../Rec/script.js"></script></head>
<body scroll="no">
<DIV id="buttonMenu">
<SPAN CLASS="options">Разделы:&nbsp;&nbsp;</SPAN>

 <A HREF="#intro" title="Введение" CLASS="button">1</A>
 <A HREF="#use" title="Использование" CLASS="button">2</A>
 <A HREF="#synt" title="Синтаксис" CLASS="button">3</A>
 <A HREF="#2nd_synt" title="Родственный синтаксис" CLASS="button">4</A>
 <A HREF="#synt_date" title="Синтаксис даты" CLASS="button">5</a>
 <A HREF="#empty" title="Пустые параметры" CLASS="button">6</a>
 <A HREF="#many" title="Многокомандность" CLASS="button">7</a>
 <A HREF="#comm" title="Комментарии" CLASS="button">8</a>
 <A HREF="#var_use" title="Использование переменных" CLASS="button">9</a>
 <A HREF="#instr" title="Инструкции" CLASS="button">10</a></DIV>

<DIV id="text">
<h2 align="center">Ресиверы</h2>
<h3><a name="intro"></a>Введение</h3>
<p>Ресиверы (&quot;<i>receiver</i>&quot;, с англ. – приёмник.) – ЕRM-коды, действующие на героев, объекты, события таймеры, функции, 
сообщения или игровые установки.<br>
Большинство ресиверов имеют несколько опций, что может быть использовано для самых разных вещей.<br>
Например, <a href="../Rec/LE.htm">ресивер LE</a> действует на локальные события на карте и имеет несколько различных команд для изменения свойств события.</p>

<h3><a name="use"></a>Как использовать ресиверы</h3>
<p>Ресиверы помещаются во временны&#x301;х событиях после триггера, который их запускает. 
Они выполняются один раз до конца события или достижения другого триггера. На одну строчку можно писать одну команду или более, 
но для ясности и читабельность вашего скрипта (а так же для поиска ошибок), лучше писать на каждую строку по команде.</p>

<h3><a name="synt"></a>Синтаксис ресивера</h3>
<p>Все ресиверы начинаются с двойного восклицательного знака &quot;!!&quot; и заканчиваются точкой с запятой &quot;;&quot;. 
Сразу после &quot;!!&quot; следует двухбуквенный код ресивера, как <a href="../Rec/AR.htm">AR</a> для артефактов, 
<a href="../Rec/HE.htm">HE</a> для героев и т.д. Следующая часть после этого кода зависит от типа ресивера. 
Некоторые ресиверы имеют один или более параметров перед двоеточием ( <b>:</b> ), каждый параметр - целое число. Далее, после двоеточия следует опция 
ресивера. Опции имеют много форм и могут включать один или более параметров каждый; они представлены на страницах Справочника далее как XXXX. 
Замещайте XXXX соответствующей командой или командами. После последней команды вы должны поставить знак точка с запятой &quot;;&quot;</p>
<p>Все ERM команды (ресиверы и инструкции) должны иметь, как минимум, одну опцию для корректной работы.<br>
<u>Пример синтаксиса</u>:
<script type="erm">!!LE12/21/0:E1000;</script>
В примере выше, локальное событие в координатах x=12, y=21 и уровень=0 (верх) 
станет модифицированным и будет давать 1000 опыта для героя.</p>

<h3><a name="2nd_synt"></a>Родственный синтаксис</h3>
<p>Часто вам нужно не перемещать значение, а просто добавить или убавить значение. Например, если вы хотите дать герою опыт, 
вы установите герою кол-во опыта без учета текущего значения, т.е. опыт будет установлен на новое, установленное значение. 
Так же будет и с ресурсами игроков. Для добавления или убавления мы используем расширенный синтаксис: ставим маленькую <i>d</i> как префикс числа.<br>
<u>Пример расширенного синтаксиса</u>:
<script type="erm">!!HE-1:Ed500;</script>
В этом примере 500 опыта будет добавлено к уже имеющемуся опыту.<br>
Если бы мы использовали E500, а не Ed500, у героя опыт стал бы равняться 500, а не увеличен на 500.<br>
Для отнимания 500 опыта, используйте Ed-500 соответственно.<br>
Если вы хотите оставить параметр неизменным, используйте d0 или просто d.</p>

<h3><a name="synt_date"></a>Синтаксис текущей даты</h3>
<p>На принципе использования префикса <i>d</i>, мы можем использовать префикс <i>c</i> (опять же только маленькая!) для того, 
чтобы номер текущего дня добавился к числу. Другими словами, <i>c</i> равно текущему дню. Например,<br>
c=4 – это месяц 1, неделя 1, день 4;<br>
c=8 – это месяц 1, неделя 2, день 1;<br>
c=30 – это месяц 2, неделя 1, день 2</p>
<p><u>Пример</u>:<br>
Нам нужно событие, которое запустится через пять дней после каких-либо действий игрока. 
Установим день его появления <a href="../Rec/GE.htm">ресивером GE</a>, опция F$. 
Пусть номер события будет 100 (первое число в сообщении события), используем:
<script type="erm">!!GE100:Fc5;</script>
Это событие запустится через 5 дней после выполнения команды (она выполнится после, к примеру, посещения локального события).</p>
<p>Более того, можно использовать оба префикса вместе (<i>d</i> должен стоять первым):
<script type="erm">!!GE100:Fdc5;</script></p>

<h3><a name="empty"></a>Пустые параметры</h3>
<p>Если команда имеет четыре параметра, вы ДОЛЖНЫ заполнить их все, отделяя каждый клавишей &quot;слэш&quot; <span class="key">/</span>. 
Вы не можете опустить параметр команды, иначе она не будет работать и выдаст сообщение об ошибке. 
Однако, в некоторых случаях вы можете опустить точное число и просто оставить пустым место после слэша. 
Когда вы опускаете параметр, считается, что вы ввели ноль, и если ноль - корректное значение для параметра, команда будет работать.<br>
<u>Пример</u>:
<script type="erm">!!IF:D1/5//4;</script>
Команда выше - пример использования расширенного окна диалога. Он имеет больше параметров, чем любая другая опция ERM, 
но вы не должны заполнить их все. Мы используем три из возможных 16. Именно для этой команды ввод 0 значит &quot;оставить без изменений&quot;, 
но многие другие команды просто принимают значение равное нулю, что не всегда подразумевалось.</p>

<h3><a name="many"></a>Многокомандность</h3>
<p>В большинстве случаев вы можете поместить несколько команд после одного заголовка ресивера (часть перед двоеточием). 
Команды можно не разделять пробелами, но для большей читаемости рекомендуемо. В некоторых случаях, например, 
установка и управление переменными <a href="../Rec/VR.htm">ресивером VR</a>, многокомандность не всегда работает корректно. 
Так, если вы используете несколько команд, убедитесь, что они выполняются правильно и дают корректный результат. 
Если одна из ваших команд показывает или устанавливает текст, вы должны поместить её последней. 
Если вы вставите любую другую команду после текста (как часть одного ресивера), вы получите ошибку.<br>
<u>Примеры</u>:
<script type="erm">!!OW:R-1/5/d-1 R-1/6/d-500; забрать кое-что у игрока
!!LE10/12/0:E1000 M^Герой учится, посетив старца...^;</script></p>

<h3><a name="comm"></a>Добавление комментариев к своему коду</h3>
<p>Что-либо в скрипте, следующее после точки с запятой и перед следующим ресивером или триггером считается комментарием и игнорируется ERM-процессором. 
Некоторые вставляют свои комментарии в квадратные скобки для облегчения чтения скрипта и комментариев другими людьми, но это не обязательно.<br>
<u>Пример кода с комментарием</u> (после точки с запятой):
<script type="erm">ZVSE
!?LE10/23/1; Событие в x=10, y=23, уровень=1(подземелье)
!!HE-1:B0/?z5; Запомнить имя героя в текстовую переменную z5
!!IF:M^Послышался крик: "%Z5... %Z5... помоги мне!"^; показать игровое окно</script>
Сообщение выше показывает имя героя для большей персональности.</p>

<h3><a name="var_use"></a>Использование переменных в ресиверах</h3>
<p>Переменные могут быть использованы для замещения любого # или $, кроме # перед двоеточием у ресиверов <a href="../Rec/CE.htm">CE</a> и <a href="../Rec/GE.htm">GE</a>. 
Все другие # и $ в ресиверах, перед и после двоеточия, могут быть замещены на переменную соответствующего типа.<br>
Многие ресиверы, относящиеся к конкретной точке на карте, также могут использовать ссылки на переменные. 
А именно, первая <i>v</i>-переменная хранит X-координату объекта; вторая <i>v</i>-переменная – Y-координату объекта; в третьей <i>v</i>-переменной должен быть Уровень.<br>
<u>Пример использования ссылок на переменные</u>: (с ресивером <a href="../Rec/OB.htm">OB</a></u>)
<script type="erm">...
!!VRv10:S25; [установить x-координату]
!!VRv11:S14; [установить y-координату]
!!VRv12:S0; [установить уровень карты]
!!OB10:S; ["отключить" объект в v10/v11/v12]</script>

<h3><a name="instr"></a>Инструкции</h3>
<p>Инструкции идентичны ресиверам, за исключением того, что начинаются с комбинации знаков восклицания и номера (!#) и срабатывают только раз, 
при первой загрузке карты. Большинство ресиверов работает и в качестве инструкций, но некоторые (особенно ресиверы определённого объекта) 
не работают вообще и вызывают сообщения об ошибке либо вылет карты. Инструкции выполняются один раз при загрузке карты, 
в порядке появления во временны&#x301;х событиях, независимо от триггеров, ресиверов и комментариев до и после них. 
Вы можете использовать инструкции для вызова функций и все обычные ресиверы (не-инструкции), будучи частью функции, будут работать нормально, 
однако, вы ДОЛЖНЫ включить функцию во временное событие ПЕРЕД инструкцией, вызывающей её, иначе она не сработает 
(вы не получите сообщения об ошибке, функция просто не сработает).<br>
<u>Примеры</u>:
<script type="erm">!#VRv10:S25; установить v10 на 25

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!?FU25;
!!IF:M^Загрузка сценария...^;
!#FU25:P; показать сообщение до показа карты</script>
</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
<script src="../erm.js"></script
</body></html>

