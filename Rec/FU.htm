<html><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1251"><title>
Ресивер FU</title>
<LINK REL="stylesheet" MEDIA="screen" TYPE="text/css" HREF="../style.css">
<script language="JScript" src="script.js"></script></head>

<body scroll="no">
<DIV id="buttonMenu">
<SPAN CLASS="options">Опции&nbsp;FU:&nbsp;&nbsp;</SPAN>

	<A HREF="#A" title="" CLASS="button">A</A>
 <SPAN CLASS="buttoninactive">B</SPAN>
	<A HREF="#C" title="Проверка на <i>y</i>-переменные вне функций" CLASS="button">C</A>
	<A HREF="#D" title="Поддержка сети" CLASS="button">D</A>
	<A HREF="#E" title="Выход из функции" CLASS="button">E</A>
 <SPAN CLASS="buttoninactive">F</SPAN>
 <SPAN CLASS="buttoninactive">G</SPAN>
 <SPAN CLASS="buttoninactive">H</SPAN>
 <SPAN CLASS="buttoninactive">I</SPAN>
 <SPAN CLASS="buttoninactive">J</SPAN>
 <SPAN CLASS="buttoninactive">K</SPAN>
 <SPAN CLASS="buttoninactive">L</SPAN>
 <SPAN CLASS="buttoninactive">M</SPAN>
 <SPAN CLASS="buttoninactive">N</SPAN>
 <SPAN CLASS="buttoninactive">O</SPAN>
	<A HREF="#P" title="Запуск функции" CLASS="button">P</A>
 <SPAN CLASS="buttoninactive">Q</SPAN>
 <SPAN CLASS="buttoninactive">R</SPAN>
	<A HREF="#S" title="" CLASS="button">S</A>
 <SPAN CLASS="buttoninactive">T</SPAN>
 <SPAN CLASS="buttoninactive">U</SPAN>
 <SPAN CLASS="buttoninactive">V</SPAN>
 <SPAN CLASS="buttoninactive">W</SPAN>
 <SPAN CLASS="buttoninactive">X</SPAN>
 <SPAN CLASS="buttoninactive">Y</SPAN>
 <SPAN CLASS="buttoninactive">Z</SPAN>

</DIV>

<DIV id="text">
<p align="center"><font size="5">Ресивер <b>FU</b> (функция)</font></p>
<p>
<b><font id="red"><br>
!!FU#:XXXX;</font> 
- ресивер функции – передаёт контроль ERM-коду функции.</b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # = 1..30000</p>
<p>Используется для создания специальной секции кода, к которой можно получить доступ из нескольких мест, и использовать повторно.<br>
Функции вызываются ресивером FU. А триггер функции (<a href="..\Tr\FU.htm">!?FU</a>) определяет начало кода функции.<br>
<u><b onclick="HideIt(5)" class="h">Комментарии (<b id="show5">показать</b>)</b></u><div id="5" class="b">
Если вы вызываете функцию инструкцией, функция должна быть описана ДО инструкции. Например, если вы хотите 
вызвать функцию FU100 в начале карты, вы можете поместить её как инструкцию <font id="erm"><b class="in">!#FU</b>100:P;</font> 
но она не будет работать, если функция не была описана ранее. Так что триггер функции (и её код) должны быть первыми.
<script type="erm">ZVSE
!?FU100;
!!IF:M^Это функция 100.^;
!#FU100:P;</script>
Пример выше работает отлично, но если <font id="erm"><b class="in">!#FU</b>100:P;</font> поставить на первое место 
(прямо после ZVSE), она не будет работать. Вы не получите сообщения об ошибке, но функция не будет выполняться.<br>
Вы можете использовать переменные в ресивере функции. Так, вы можете, к примеру, использовать такой код: 
<font id="erm"><b class="re">!!FU</b>v10:P;</font> и функция под номером, равном числу, записанному <i>сейчас</i> в v10, 
начнёт работу (если триггер этой функции существует).<br>
<br>
<u>
<b onclick="HideIt(1)" class="h">Примеры функций (<b id="show1">показать</b>)</b></u><div id="1" class="b">
<u>Пример 1</u>
<script type="erm">!?FU1;
!!IF:M^Здесь мы вначале. %X1 %X16^;
!!VRx1:+1;
!!FU2:Px1;
!!IF:M^А здесь - в конце. %X1 %X16^;</script>
<br><u>Пример 2</u>
<script type="erm">...
!!VRv10:S5;
!!FUv10:P;</script>
В этом примере функция будет иметь номер 5 и заработает, только если триггер !?FU5 существует.<br>
<br>
Каждая функция имеет 100 уникальных переменных (y1..y100). Вы можете устанавливать, проверять и получать эти переменные. 
Каждый вызов создаёт индивидуальные переменные, которые после выполнения функции опять обратятся в нули. 
Так что все операции над локальными переменными могут иметь место только в теле функции.<br>
<br>
<u>Пример 3</u>
<script type="erm">...
!!FU1:Pi/102/v10/35;
!?FU1;
!!IF:M^x1=%X1, x2=%X2^;</script>
<br>
Здесь, если вы вызовете функцию с параметрами, переменные x1&hellip;x16 в теле функции будут иметь соответственные значения.
<script type="erm">...
!!FU1:P10/20;	будет показано "x1=10, x2=20"
!!VRv5:S33;
!!FU1:Pv5/0;	будет показано "x1=33, x2=0"</script>
Переменные y1..y100 служат локальными переменными. Вы можете использовать их внутри функции для любых нужд. 
Все функции имеют свои собственные уникальные локальные переменные, даже если вы вызываете новые функции. 
Когда функция оканчивается, <i>y</i>-переменные сбрасываются на 0.
<script type="erm">!!FU1:P;	вызвать функцию 1

!?FU1;		y1 не настроена (y1=0)
!!VRy1:S1;	y1=1
!!FU2:P;	вызвать функцию 2
!!IF:M^y1=%Y1^; "y1=1" (y1 возвратит оригинальное значение 1, установленное перед вызовом функции 2)
!?FU2;		y1 не настроена (y1=0)
!!VRy1:S2;	y1=2
!!IF:M^y1=%Y1^;	"y1=2"</script>
Вы можете добавлять код (ресиверы) к уже существующему триггеру функции, 
используя одинаковые триггеры два или более раз.<br>
<br>
<u>Пример 4</u>
<script type="erm">!?FU1;
!!... ресиверы 1
...
!?FU1;
!!... ресиверы 2
...
!!FU1:...</script>
Последний вызов выполнит все ресиверы 1 и затем все ресиверы 2 в том же порядке.
</div></div></p>
<hr noshade>
<p>
<font id="red"><b><a name="A"></a>A?$</b></font><a href="../ERA/index.htm" title="Работает только с ERA.."><img src="../Img/era.gif" class="TE"></a><br>
Возвращает кол-во <i>x</i>-аргументов (не включая x16 для <a href="DO.htm">DO:P</a>), полученных функцией.<br>
<u>
<b onclick="HideIt(10)" class="h">Комментарий (<b id="show10">показать</b>)</b></u><div id="10" class="b">
Т.е. даёт возможность запрашивать кол-во аргументов функций, вызываемых через FU:P, FU:D, DO:P.<br>
Такой механизм позволяет писать функции с необязательными параметрами (параметры со значениями по умолчанию) и 
функции с переменным числом аргументов.<br>
<u>Пример 1</u>:
<script type="erm">!?FU(KillHero);
; Убить указанного героя. Демонстрация необязательных параметров.
; [x1] - номер героя (опционально, -1 = по умолчанию)
!!FU:A?k;       получить число аргументов ф-ции
!!VRx1&k=0:S-1; установить в x1 значение -1, если нет ни одного аргумента
!!HEx1:K;       убить героя

!?CM0;
!!FU(KillHero):P; убить текущего героя
!!FU(KillHero):P155; убить Ксерона</script><br>
<u>Пример 2</u>:
<script type="erm"> !?FU(sum);
; Вычислить сумму всех указанных параметров
; x1..x[n] - аргументы для суммирования
; x[n+1] - результат вычисления
!!FU:A?k;  подсчитать число аргументов
!!VRxk:S0; установить результат = 0

!!VRi:S0;
[:for]
!!SN&i>=k:G[end-for]; повторить k раз
!!VRxk:+xi; добавить значение следующего аргумента к результату
!!VRi:+1;
!!SN:G[for];
[:end-for]

!?CM0;
!!FU(sum):P100/200/300/400/?s; получить 100 + 200 + 300 + 400 в переменную "s"
!!IF:M^%Vs^; покажет "1000"
</script></div></p>
<hr noshade>
<p>
<font id="red"><b>
<a name="C"></a>C$</b></font><br>
Проверить на неправильные <i>y</i>-переменные. Можно использовать без 
параметров, что равнозначно !!FU:C0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $ = 0 – разрешить проверку (можно просто FU:C)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $ =1 – запретить проверку (установлено по умолчанию на старте)
<br>
Команда лишь проверит, использовали ли вы <i>y</i>-переменные вне тела функции (во время выполнения), 
ведь зачастую это главный источник проблем. Наиболее логично использовать эту команду как инструкцию и она может 
быть полезна при тестировании скриптов.<br>
<u>
<b onclick="HideIt(2)" class="h">Пример (<b id="show2">показать</b>)</b></u><div id="2" class="b">
<script type="erm">ZVSE
!#FU:C;
!#TM1:S1/999/1/1; - установить таймер 1 для красного игрока
!?TM1;
!!VRy1:S1;
!!FU123:P;
!?FU123;
!!VRy1:S2;</script>
В этом примере, когда таймер начнёт свою работу, вы получите сообщение, что 
<i>y</i>-переменная используется вне тела функции.</div></p>
<hr noshade>
<p><font id="red"><b><a name="D"></a>D$1[/$2/$3/&hellip;/$16]</b></font><br>
Поддержка сетевых игр. Вызывает функцию на стороне сетевого оппонента. 
Синтаксис такой же, как и <a href="#P">FU:P</a>, и, соответственно, особенности 
такие же. Для получения доступа к параметрам используйте синтаксис x# (# = 
1..16). Они могут быть использованы где угодно (внутри функции) как обычные 
переменные. Когда вы вызываете функцию, все параметры, которые не были 
установлены, будут наследованы.<br>
<i>Примечание:</i> параметр D$1 должен быть помещён в вызове !!FU (даже если 
нет значений, необходимых для передачи в функцию) для корректной работы команды.<br>
<u>
<b onclick="HideIt(3)" class="h">Пример 1 (<b id="show3">показать</b>)</b></u><div id="3" class="b">
Скажем, вы используете некоторые специфические команды, которые возымеют эффект на поле боя (например, кастование заклинаний с 
помощью ERM). Опять же, если вы проведете действия на одной стороне, возникнет проблема, потому что ничего не произошло на другой стороне. 
Теперь вы можете использовать дистанционный вызов для таких случаев. Это означает, что вы вызываете функцию, 
но она запускается не на этом, текущем, компьютере, а на втором (компьютере оппонента). Передаётся до 16 параметров.<br>
К примеру, на своей стороне вы имеете:
<script type="erm">...
!!BMv10:Mi/y5/5;</script>
Для корректного выполнения вы должны проделать некоторые вещи:
<script type="erm">!!BMv10:Mi/y5/5;
!!FU12345:Dv10/i/y5/5;
!?FU12345;
!!BMx1:Mx2/x3/x4;
</script>
Это всё. Принцип работы: FU:D немедленно передаёт все <i>x</i>-параметры на другой 
компьютер и вызовет там функцию 12345. Так команда <font id="erm"><b class="re">!!BM</b>v10:M...;</font> будет работать на 
одном компьютере и команда <font id="erm"><b class="re">!!BM</b>x1:M...;</font> на другом. Если вы сделаете всё правильно, 
то получите одинаковый эффект на обеих сторонах.<br>
Заметьте, что вы можете передать значения некоторых переменных командой <a href="IP.htm#V">IP:V</a> и затем 
вызвать FU:D для передачи более, чем 16 <i>x</i>-параметров на другой компьютер.</div>
<u>
<b onclick="HideIt(4)" class="h">Пример 2 (<b id="show4">показать</b>)</b></u><div id="4" class="b">
<script type="erm">ZVSE

!?BG0;
!!IF:M^Привет!^;
!!VRv99:S99;
!!VRv100:S100;
!!VRv101:S101;
!!IP:V99/100;
!!FU123:D1/2/3/4/5;

!?FU123;
!!IF:M^V99=%V99, V100=%V100, V101=%V101, X1=%X1, X2=%X2, X3=%X3, X4=%X4, X5=%X5^;
</script>
Вы увидите сообщение <i>&quot;Привет!&quot;</i> при любом действии стека, далее увидите сообщение <i>
&quot;V99=99, V100=100, V101=0, X1=1, X2=2, X3=3, X4=4, X5=5&quot;</i> на другом компьютере. 
Затем вы получите сообщение <i>&quot;Привет!&quot;</i> на другом компьютере.<br>
Если вы продолжите, следующее полученное вами сообщение будет <i>&quot;V99=99, V100=100, 
V101=101, X1=1, X2=2, X3=3, X4=4, X5=5&quot;</i>. Так, изменилась v101. Это потому что вы 
отправили v99 и v100 через сеть и вызвали функцию, которая покажет сообщение 
(поэтому v101 = 0). Но затем триггер !?BG0 сработал на стороне защищающегося и 
v101 была установлена на значение 101.<br>
Этот пример лишь демонстрация действий, потому что этот скрипт:
<script type="erm">!?BG0;
!!IF:M^Привет!^:
!!VRv99:S99;
!!VRv100:S100;
!!VRv101:S101;</script>&hellip; будет работать одинаково на обеих сторонах. Но, если вы запустите скрипт как 
реакцию на действие человека (обычно клик мыши), вам нужно будет продумать 
передачу изменений на другой компьютер.</div><br>
См. также: <a href="IP.htm">ресивер IP</a>
<hr noshade>
<p>
<font id="red"><b>
<a name="E"></a>E</b></font><br>
Эта команда немедленно выходит из последней запущенной функции или 
триггера.<br>
Вы можете использовать эту команду для избежания 
перезапуска функции.<br>
<u><b onclick="HideIt(6)" class="h">Пример 1 (<b id="show6">показать</b>)</b></u> <div id="6" class="b">
Было:<script type="erm">!?FU123;
...
!!VRv10:S0 T10; получить случайное значение
!?FU123&v10<5; продолжать, только если случайное значение меньше 5
...</script>
Теперь вы можете использовать следующий способ:
<script type="erm">!?FU123;
...
!!VRv10:S0 T10; получить случайное значение
!!FU&v10>=5:E; выйти из функции, только если случайное значение больше либо равно 5
...</script></div>
<u><b onclick="HideIt(7)" class="h">Пример 2 (<b id="show7">показать</b>)</b></u><div id="7" class="b">
<script type="erm">ZVSE
!?LE3/4/0; все триггеры для локальных событий
!!IF:M^L0-0^;
!!FU123:P;
!!IF:M^L0-1^;
!!FU:E; 	выход
!!IF:M^L0-2^;

!?FU123;
!!IF:M^L1-0^;
!!FU124:P;

!!IF:M^L1-1^;
!!FU:E; 	выход
!!IF:M^L1-2^;

!?FU124;
!!IF:M^L2-0^;
!!FU125:P;
!!IF:M^L2-1^;
!!IF:M^L2-1a^;

!?FU125;
!!IF:M^L3-0^;
!!FU126:P;
!!IF:M^L3-1^;
!!FU:E; выход
!!IF:M^L3-2^;

!?FU126;
!!IF:M^L4-0^;
!!IF:M^L4-1^;

!!FU:E; выход
!!IF:M^L4-2^;
</script>
<br>
Вы получите следующие сообщения:<script type="erm">L0-0
L1-0
L2-0
L3-0
L4-0
L4-1
L3-1
L2-1
L2-1a
L1-1
L0-1</script></div></p>
<hr noshade>
<p>
<font id="red"><b>
<a name="P"></a>P$1[/$2/$3/../$16]</b></font><br>
Означает старт функции, позволяет получить доступ к параметрам x1..x16.<br>
Опция P всегда должна существовать для старта функции:
<script type="erm">!!FU1:P; - правильно,
!!FU1;	 - неправильно</script></p>
<hr noshade>
<p>
<font id="red"><b><a name="S"></a>S#/?$</b></font><a href="../ERA/index.htm" title="Работает только с ERA.."><img src="../Img/era.gif" class="TE"></a><br>
Даёт возможность запрашивать синтаксис, который использовался для определённого параметра функции.
<pre>        # – индекс аргумента
        $ – тип синтаксиса:
	0 - получить: например <b id="erm"><font class="re">!!FU</font>..:P?y1;</b>
	1 - установить: например <b id="erm"><font class="re">!!FU</font>..:P10;</b>
	2 - добавить: применяется через префикс &quot;<i>d</i>&quot;, например <b id="erm"><font class="re">!!FU</font>..:Pd200;</b></pre>
<b><u>Комментарий</u>:</b> используя эту команду, скриптеры смогут писать функции, которые будут действовать так же, как обычные команды ERM. Например, одна функция для получения/установки/добавления рекрутов в жилище существ.
</p>
<hr noshade>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

</DIV>
<script src="../erm.js"></script></body></html>